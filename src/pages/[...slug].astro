---
import Layout from "@layouts/Layout.astro"

const slug = Astro.params.slug || "index"
let json: any = { title: "Failed to load page", description: "Failed to load page", html: "", footer: "0 views<br>" }
const fourohfour = `
<div class="markdown" id="pagecontent">
    <a name="notfound" class="anchor_offset"></a>
    <h1>Not Found<a class="anchor" href="#notfound"><i class="mdi mdi-link-variant"></i></a></h1>
    <p>This page is missing.</p>
</div>
`

try {
    // This slug endpoint shouldn't ever handle a .json file (unless it's not present)
    // This happens if a link in a page isn't mirrored
    if (slug.endsWith(".json")) {
        json.title = "Page Not Found"
        json.description = "Page Not Found"
        json.html = fourohfour
        return new Response(JSON.stringify(json), { status: 404 })
    }

    const resource = `${Astro.url.protocol}//${Astro.url.host}/content/${slug.toLowerCase()}.json`
    const response = await fetch(resource)
    if (response.status === 404) {
        // Otherwise, we return a formatted 404 page. This happens if someone visits a missing page directly.
        // TODO: Can we just not catch this case and let the 404 response handle it?
        json.title = "Page Not Found"
        json.description = "Page Not Found"
        json.html = fourohfour
    } else {
        json = await response.json()
    }
} catch (e) {
    json.html = "Failed to load page <b>" + slug + "</b>" + (e ? "<p>" + e.toString() + "</p>" : "")
}

let title = json.title
let description = json.description
let content = json.html
let footer = json.footer

const footerInfo = footer.split("<br>")
let views = footerInfo[0] || "0 views"
let updated = footerInfo[1] || ""
---

<Layout title={title} description={description} views={views} updated={updated}>
    <Fragment set:html={content} />
</Layout>
