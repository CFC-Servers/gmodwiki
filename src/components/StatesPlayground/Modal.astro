<div id="modal-overlay" class="modal-overlay">
    <div class="modal-content">
        <button class="modal-close-btn">&times;</button>
        <h2>Download Icon</h2>
        <div id="modal-icon-display" class="modal-icon-display"></div>
        <div class="modal-controls">
            <div class="control-group">
                <label for="format-select">Format</label>
                <select id="format-select">
                    <option value="png">PNG</option>
                    <option value="jpeg">JPEG</option>
                    <option value="svg">SVG</option>
                </select>
            </div>
            <div class="control-group">
                <label for="modal-size-input">Size (px)</label>
                <input id="modal-size-input" type="number" value="128">
            </div>
        </div>
        <button id="download-btn" class="download-btn">Download</button>
    </div>
</div>

<style>
    .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.6); display: none; align-items: center; justify-content: center; z-index: 1000;}
    .modal-overlay.active { display: flex; }
    .modal-content { background: white; padding: 2rem; border-radius: 8px; position: relative; width: 90%; max-width: 400px; }
    .modal-close-btn { position: absolute; top: 10px; right: 15px; background: none; border: none; font-size: 2rem; cursor: pointer; color: #888; }
    .modal-icon-display { padding: 2rem; margin: 1rem 0; display: grid; place-content: center; background-color: #f0f0f0; border-radius: 5px; }
    .modal-icon-display .icon { width: 250px; height: 250px; border-radius: 27.3%; }
    .modal-controls { display: flex; justify-content: space-around; gap: 1rem; margin: 1.5rem 0; }
    .control-group { display: flex; flex-direction: column; gap: 0.5rem; }
    .control-group input, .control-group select { padding: 0.5rem; font-size: 1rem; border: 1px solid #ccc; border-radius: 4px; }
    .download-btn { display: block; width: 100%; padding: 0.75rem; font-size: 1.1rem; font-weight: bold; color: white; background-color: #4CAF50; border: none; border-radius: 5px; cursor: pointer; }
</style>

<script>
    import { toPng, toJpeg, toSvg } from "html-to-image";
    import download from "downloadjs";

    const modalOverlay = document.getElementById("modal-overlay");
    const modalCloseBtn = document.querySelector(".modal-close-btn");
    const modalIconDisplay = document.getElementById("modal-icon-display");
    const modalSizeInput = document.getElementById("modal-size-input");
    const formatSelect = document.getElementById("format-select");
    const downloadBtn = document.getElementById("download-btn");

    let activeIconElement = null;

    document.addEventListener("openModal", (event) => {
        const { iconElement, title } = event.detail;

        activeIconElement = iconElement;
        
        const clonedIcon = activeIconElement.cloneNode(true);
        modalIconDisplay.innerHTML = "";
        modalIconDisplay.appendChild(clonedIcon);
        
        modalOverlay.dataset.iconTitle = title.toLowerCase().replace(/[\/\s]/g, "-");
        modalOverlay.classList.add("active");
    });

    function closeModal() {
        modalOverlay.classList.remove("active");
        activeIconElement = null;
    }
    modalCloseBtn.addEventListener("click", closeModal);
    modalOverlay.addEventListener("click", (event) => {
        if (event.target === modalOverlay) closeModal();
    });

    downloadBtn.addEventListener("click", async () => {
        if (!activeIconElement) return;

        const size = parseInt(modalSizeInput.value, 10) || 128;
        const format = formatSelect.value;
        const filename = `${modalOverlay.dataset.iconTitle}.${format}`;
        const originalStyle = activeIconElement.style.cssText;

        try {
            activeIconElement.style.cssText = `
                width: ${size}px; 
                height: ${size}px; 
                border-radius: ${size * (3 / 11)}px;
            `;

            const dataUrl = await {
                "png": () => toPng(activeIconElement, { skipFonts: true }),
                "jpeg": () => toJpeg(activeIconElement, { skipFonts: true, quality: 0.95 }),
                "svg": () => toSvg(activeIconElement, { skipFonts: true }),
            }[format]();

            download(dataUrl, filename);
        } catch (error) {
            console.error("Download failed:", error);
        } finally {
            activeIconElement.style.cssText = originalStyle;
            closeModal();
        }
    });
</script>
